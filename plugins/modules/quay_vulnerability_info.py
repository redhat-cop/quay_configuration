#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2021, 2022, 2024 Hervé Quatremain <herve.quatremain@redhat.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# For accessing the API documentation from a running system, use the swagger-ui
# container image:
#
#  $ podman run -p 8888:8080 --name=swag -d --rm \
#      -e API_URL=http://your.quay.installation:8080/api/v1/discovery \
#      docker.io/swaggerapi/swagger-ui
#
#  (replace the hostname and port in API_URL with your own installation)
#
# And then navigate to http://localhost:8888


from __future__ import absolute_import, division, print_function

__metaclass__ = type


DOCUMENTATION = r"""
---
module: quay_vulnerability_info
short_description: Gather information about image vulnerabilities in Quay Container Registry
description:
  - Gather information about the vulnerabilities of an image in a repository.
version_added: '0.0.1'
author: Hervé Quatremain (@herve4m)
options:
  image:
    description:
      - Name of the image. The format is C(namespace)/C(repository):C(tag) or
        C(namespace)/C(repository)@C(digest). The namespace can be an
        organization or a personal namespace.
      - If you omit the namespace part, then the module looks for the
        repository in your personal namespace.
      - If you omit the tag and the digest part, then V(latest) is assumed.
    required: true
    type: str
notes:
  - If a vulnerability scanner such as Clair is not installed, then the
    returned vulnerability list is always empty.
attributes:
  check_mode:
    support: full
  diff_mode:
    support: none
  platform:
    support: full
    platforms: all
extends_documentation_fragment:
  - ansible.builtin.action_common_attributes
  - infra.quay_configuration.auth
  - infra.quay_configuration.auth.login
"""

EXAMPLES = r"""
- name: Retrieve the vulnerabilities of the coreos/dpp-aws-toolkit:latest image
  infra.quay_configuration.quay_vulnerability_info:
    image: coreos/dpp-aws-toolkit:latest
    quay_host: quay.io
  register: vuln
"""

RETURN = r"""
status:
  description:
    - Scan status reported by Quay.
    - V(scanned) indicates that Quay scanned the image. The result is available
      in the RV(vulnerabilities) array.
    - V(queued) indicates that Quay has not yet scanned the image.
    - V(unsupported) indicates that Quay does not support the operating system
      or the package manager of the image. Vulnerabilities are not available
      for such images.
    - V(unknown) indicates that Quay did not return any data about the
      requested image.
  type: str
  returned: always
  sample: scanned
vulnerabilities:
  description: List of vulnerabilities.
  returned: always
  type: list
  elements: dict
  contains:
    Name:
      description: Name of the vulnerable software or package.
      type: str
      returned: always
      sample: lz4-libs
    Version:
      description: Version of the vulnerable software or package.
      type: str
      returned: always
      sample: 1.8.3-3.el8_4
    VersionFormat:
      description: Packaging format (V(rpm), V(dpkg), ...)
      type: str
      returned: always
      sample: dpkg
    Vulnerabilities:
      description: List of vulnerabilities for the software or package.
      returned: always
      type: list
      elements: dict
      sample: [
        {
          "Description": "do_core_note in readelf.c in libmagic.a in file 5.35
             has an out-of-bounds read because memcpy is misused.",
          "FixedBy": "",
          "Link": "https://access.redhat.com/security/cve/CVE-2019-8906...",
          "Metadata": {
              "DistroName": "",
              "DistroVersion": "",
              "NVD": {
                  "CVSSv3": {
                      "Score": 4.4,
                      "Vectors": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:L"
                  }
              },
              "RepoLink": null,
              "RepoName": "cpe:2.3:o:redhat:enterprise_linux:8:*:*:*:*:*:*:*",
              "UpdatedBy": "rhel-vex"
          },
          "Name": "CVE-2019-8906",
          "NamespaceName": "rhel-vex",
          "Severity": "Low"
        },
        {
          "Description": "do_core_note in readelf.c in libmagic.a in file 5.35
             has a stack-based buffer over-read, related to file_printable,
             a different vulnerability than CVE-2018-10360.",
          "FixedBy": "",
          "Link": "https://access.redhat.com/security/cve/CVE-2019-8905...",
          "Metadata": {
              "DistroName": "",
              "DistroVersion": "",
              "NVD": {
                  "CVSSv3": {
                      "Score": 6.5,
                      "Vectors": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H"
                  }
              },
              "RepoLink": null,
              "RepoName": "cpe:2.3:o:redhat:enterprise_linux:8:*:*:*:*:*:*:*",
              "UpdatedBy": "rhel-vex"
          },
          "Name": "CVE-2019-8905",
          "NamespaceName": "rhel-vex",
          "Severity": "Low"
        }
      ]
  sample: [
    {
      "AddedBy": "sha256:2de8...f7e7",
      "BaseScores": [
          8.1
      ],
      "CVEIds": [
          "CVE-2019-17543"
      ],
      "Name": "lz4-libs",
      "NamespaceName": "",
      "Version": "1.8.3-3.el8_4",
      "VersionFormat": "",
      "Vulnerabilities": [
        {
          "Description": "LZ4 before 1.9.2 has a heap-based buffer overflow in
            LZ4_write32 (related to LZ4_compress_destSize), affecting
            applications that call LZ4_compress_fast with a large input. (This
            issue can also lead to data corruption.)",
          "FixedBy": "0:1.8.3-5.el8_10",
          "Link": "https://access.redhat.com/security/cve/CVE-2019-17543...",
          "Metadata": {
              "DistroName": "",
              "DistroVersion": "",
              "NVD": {
                  "CVSSv3": {
                      "Score": 8.1,
                      "Vectors": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H"
                  }
              },
              "RepoLink": null,
              "RepoName": "cpe:2.3:o:redhat:enterprise_linux:8:*:baseos:...",
              "UpdatedBy": "rhel-vex"
          },
          "Name": "CVE-2019-17543",
          "NamespaceName": "rhel-vex",
          "Severity": "Medium"
        }
      ]
    }
  ]
"""

from ..module_utils.api_module import APIModule, APIModuleError
from ..module_utils.quay_image import QuayImage


def main():
    argument_spec = dict(image=dict(required=True))

    # Create a module for ourselves
    module = APIModule(argument_spec=argument_spec, supports_check_mode=True)

    # Extract our parameters
    name = module.params.get("image").strip("/:")

    # Get the components of the given image (namespace, repository, tag, digest)
    img = QuayImage(module, name)
    namespace = img.namespace
    if namespace is None:
        module.fail_json(
            msg=(
                "The `image' parameter must include the"
                " organization: <organization>/{name}."
            ).format(name=name)
        )

    # Check whether namespace exists (organization or user account)
    namespace_details = module.get_namespace(namespace)
    if not namespace_details:
        module.exit_json(changed=False, vulnerabilities=[])

    # Get the digest
    if img.digest:
        manifest_digest = img.digest
    else:
        tags = module.get_tags(namespace, img.repository, img.tag, only_active_tags=False)
        if not tags:
            module.exit_json(changed=False, vulnerabilities=[])
        try:
            manifest_digest = tags[0]["manifest_digest"]
        except KeyError:
            module.fail_json(
                msg="Cannot retrieve the manifest digest for the {image} image.".format(
                    image=name
                )
            )

    # Get the vulnerabilities
    #
    # GET
    #  /api/v1/repository/{namespace}/{repo}/manifest/{digest}/security?vulnerabilities=true
    # {
    #   "status": "scanned",
    #   "data": {
    #     "Layer": {
    #       "Features": [
    #         {
    #           "Name": "libzstd",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "29b3...13fd.beec3614-c397-4dc8-bc9b-2a8d921b9a7e",
    #           "Version": "1.4.4-1.el8",
    #           "Vulnerabilities": []
    #         },
    #         {
    #           "Name": "gmp",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "29b3...13fd.beec3614-c397-4dc8-bc9b-2a8d921b9a7e",
    #           "Version": "1:6.1.2-10.el8",
    #           "Vulnerabilities": []
    #         },
    #         {
    #           "Name": "python38-wheel",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "0e93...9210.43268bd7-e3d3-4dea-b784-8b58c3e6b2d0",
    #           "Version": "0.33.6-5.module_el8.4.0+647+0ba99ce8",
    #           "Vulnerabilities": [
    #             {
    #               "Name": "RHSA-2021:1879",
    #               "NamespaceName": "centos:8",
    #               "Link": "https://access.redhat.com/errata/RHSA-2021:1879",
    #               "FixedBy": "0:0.33.6-5.module+el8.4.0+8888+89bc7e79",
    #               "Description": "Python is an interpreted, ... section.",
    #               "Metadata": null,
    #               "Severity": "Medium"
    #             },
    #             {
    #               "Name": "RHSA-2021:2583",
    #               "NamespaceName": "centos:8",
    #               "Link": "https://access.redhat.com/errata/RHSA-2021:2583",
    #               "FixedBy": "0:0.33.6-5.module+el8.4.0+8888+89bc7e79",
    #               "Description": "Python is an interpreted, ... section.",
    #               "Metadata": null,
    #               "Severity": "Medium"
    #             }
    #           ]
    #         },
    #         {
    #           "Name": "perl-PathTools",
    #           "VersionFormat": "rpm",
    #           "NamespaceName": "centos:8",
    #           "AddedBy": "0e93...9210.43268bd7-e3d3-4dea-b784-8b58c3e6b2d0",
    #           "Version": "3.74-1.el8",
    #           "Vulnerabilities": []
    #         }
    #       ]
    #     }
    #   }
    # }
    query_params = {"vulnerabilities": True}
    try:
        vulns = module.get_object_path(
            "repository/{namespace}/{repository}/manifest/{manifest_digest}/security",
            query_params=query_params,
            exit_on_error=False,
            namespace=namespace,
            repository=img.repository,
            manifest_digest=manifest_digest,
        )
    except APIModuleError:
        # The Quay installation does not have Clair installed
        module.exit_json(changed=False, vulnerabilities=[])

    status = vulns.get("status") if vulns else "unknown"
    try:
        vulnerabilities = [
            i
            for i in vulns["data"]["Layer"].get("Features", [])
            if len(i.get("Vulnerabilities", [])) > 0
        ]
    except TypeError:
        module.exit_json(changed=False, status=status, vulnerabilities=[])
    module.exit_json(changed=False, status=status, vulnerabilities=vulnerabilities)


if __name__ == "__main__":
    main()
